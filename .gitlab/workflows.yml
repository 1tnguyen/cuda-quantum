workflow:
  name: 'Staging'
  rules:
    - if: '$CI_COMMIT_BRANCH == "bot/data" && $CI_COMMIT_TITLE =~ /^ghcr\.io\/nvidia\/cuda-quantum-dev@sha256:\S+$/'
      variables:
        resource_group: cuda-quantum-dev

default:
  tags: 
    - os/linux
  timeout: 1h
  interruptible: true

stages:
  - build
  - deploy

MGMN SV Simulator:
  stage: build
  dependencies: []
  image: $CI_COMMIT_TITLE
  tags:
    - hostname/xpl-dvt-55
  resource_group: $resource_group
  interruptible: false
  artifacts:
    paths:
      - artifacts/mgmn_svsim/cuquantum/
      - artifacts/mgmn_svsim/cudaq/
    expire_in: 1 day
  script:
    - echo "Checking out commit $CUDAQ_MGMN_SVSIM_COMMIT on $CI_SERVER_HOST/$CUDAQ_MGMN_SVSIM_REPO."
    - mkdir cudaq_mgmn_svsim && cd cudaq_mgmn_svsim && git init
    - git fetch --depth 1 https://$READ_ACCESS_TOKEN:$READ_ACCESS_TOKEN@$CI_SERVER_HOST/$CUDAQ_MGMN_SVSIM_REPO $CUDAQ_MGMN_SVSIM_COMMIT && git checkout FETCH_HEAD
    - (bash build.sh $READ_ACCESS_TOKEN && built=true) || built=false
    - cd .. && rm -rf cudaq_mgmn_svsim
    - mkdir -p artifacts/mgmn_svsim/cuquantum && cp -r "$CUQUANTUM_INSTALL_PREFIX"/* artifacts/mgmn_svsim/cuquantum
    - mkdir -p artifacts/mgmn_svsim/cudaq && cp -r "$CUDAQ_INSTALL_PREFIX"/* artifacts/mgmn_svsim/cudaq
    - ls "$CUDAQ_INSTALL_PREFIX"/targets/*.config
    - if $built; then `exit 0`; else `exit 1`; fi

Push to GitHub:
  stage: deploy
  dependencies: 
    - MGMN SV Simulator
  tags:
    - hostname/xpl-dvt-55
  resource_group: $resource_group
  interruptible: false
  script:
    - type -p curl >/dev/null || (apt-get update && apt-get install -y --no-install-recommends curl)
    - apt-get update && apt-get install -y --no-install-recommends zip ca-certificates && update-ca-certificates
    - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg --connect-timeout 300 | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    - chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    - apt-get update && apt-get install -y --no-install-recommends gh
    - upstream_url=https://github.com/NVIDIA/cuda-quantum && export GH_TOKEN=$GITHUB_TOKEN
    - if [ -z "$(git remote -v | grep upstream)" ]; 
      then git remote add upstream ${upstream_url}.git;
      fi
    - cudaqdev_digest=${CI_COMMIT_TITLE#ghcr.io/nvidia/cuda-quantum-dev@}
    - build_info=`cat deployments/staging/cuda-quantum-dev/${cudaqdev_digest#sha256:}`
    - release_id=`echo "$build_info" | grep -s -o 'release-id:\s*\S*' | rev | cut -d ' ' -f 1 | cut -d ':' -f 1 | rev`
    - source_commit=`echo "$build_info" | grep -s -o 'source-sha:\s*\S*' | rev | cut -d ' ' -f 1 | cut -d ':' -f 1 | rev`
    - versions=`gh release list -R $upstream_url --exclude-drafts --exclude-pre-releases | egrep -o "([0-9]{1,}\.)+[0-9]{1,}\S*" | sort -r -V`
    - latest_tag=`echo $versions | cut -d ' ' -f 1`
    - |
      if [ -z "$(gh release list | grep -s $release_id)" ];
      then
        rel_notes="This release draft is managed by cd processes."
        rel_notes+=$(echo "<br/>GitHub commit [$source_commit]($upstream_url/tree/$source_commit)")
        gh release create $release_id --title $release_id -R $upstream_url \
          --target $source_commit --draft --prerelease \
          --generate-notes --notes-start-tag $latest_tag --notes "$rel_notes"
      fi
    - cd artifacts && zip -r mgmn_svsim.zip mgmn_svsim
    - gh release upload $release_id -R $upstream_url mgmn_svsim.zip --clobber
    - echo "$build_info" > build_info.txt && (echo -n "data-commit:" && echo " $CI_COMMIT_SHA") >> build_info.txt
    - gh release upload $release_id -R $upstream_url build_info.txt --clobber
    - additional_notes="Release edited by [GitLab pipeline]($CI_PIPELINE_URL)." &&
      additional_notes+=$(echo "<br/>Triggered based on [this commit]($upstream_url/commit/$CI_COMMIT_SHA).")
    - existing_notes=`gh release view $release_id --json body --jq .body`
    - gh release edit $release_id -R $upstream_url
        --notes "$existing_notes<br/><br/>$additional_notes"
